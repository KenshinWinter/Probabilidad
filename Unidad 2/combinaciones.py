# -*- coding: utf-8 -*-
"""Combinaciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WDTsKEzKZabUbmZz7FysTlcs4mN-cHD2
"""

import math as mt
from itertools import combinations
from itertools import combinatios_with_replacement
import numpy as np

nombres = ["Oscar", "Paco", "Paty", "Laura", "Ruben", "Luis", "Lucy", "Alberto", "Juan", "Danny"]
n = len(nombres)
r = 2
Cn = mt.factorial(n) / (mt.factorial(r) * mt.factorial(n-r))

print("Existen ", Cn , " posibles combinaciones sin repeticion del total de ",
      n , " nombres ", " en grupos de ", r , " en ", r)
print("Aqui las combinaciones")
combinaciones_nombres = list(combination(nombres, r))

#Imprime las combinaciones
for combinacion in combinaciones_nombres:
  print(combinacion)

caracteres =["A", "B", "C", "D", "E", "F", "0", "1", "2", "3", "4", "5"]
n = len(caracteres)
r = 10 # ¿Como agrupar?

Cn =mt.factorial(n) / (mt.factorial(r) * mt.factorial(n-r))

print("Existen ", Cn, " posibles combinaciones sin repeticion del total de ", n,
      " caracteres ", " en grupos de ", r , " en ", r)

print("Aqui las combinaciones")
combinaciones_caracteres = list(combinations(caracteres, r))

#Imprime las combinaciones
for combinacion in combinaciones_caracteres:
    print(combinacion)

dado = [1,2,3,4,5,6]
n = len(dado)
r = 2 # ¿Como agrupar?, de dos en dos porque hay dos dados

CnR = mt.factorial(n+r-1) / (mt.factorial(r) * mt.factorial((n+r-1)-r))

print("Existen ", CnR , " posibles combinaciones con repeticion del total de ", n ,
      " caracteres ", " en grupos de ", r ," en " r)
print("Aqui las combinaciones con repeticion de dos dados")

#Definir el conjunto de elementos
elementos = [1,2,3,4,5,6]

#Calcular las combinaciones con repeticion
combinaciones_dados = list(combinations_with_replacement(dado,r))

#Imprimir las combinaciones
for combinacion in combinaciones_dados:
    print(combinacion)